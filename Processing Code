import twitter4j.*;
import twitter4j.api.*;
import twitter4j.auth.*;
import twitter4j.conf.*;
import twitter4j.json.*;
import twitter4j.management.*;
import twitter4j.util.*;
import twitter4j.util.function.*;
import processing.serial.*;

Serial myPort;


int twCount=3;
//int twCount1=0;



void setup() {
  String portName = Serial.list()[3]; //change the 0 to a 1 or 2 etc. to match your port
  println(portName);
  myPort = new Serial(this, portName, 9600);

  ConfigurationBuilder cb;
  cb = new ConfigurationBuilder();
  cb.setOAuthConsumerKey("1IcxPmn6rpAZEGH8kB05mFYYx");
  cb.setOAuthConsumerSecret("uABJvq6I6uQsSYzjR1iuM15OdJ3oyxDaoGUu5QtjkXU99G4Alx");
  cb.setOAuthAccessToken("1537613406-jKeYeU9cUOt50cETN0HFKz9uNbO7IejedalAvs8");
  cb.setOAuthAccessTokenSecret("m5JJElpfI4QPCFAB7eTMWEAbh9OCJdjehDlKOI3gF5dRQ");

  /**
   * Main entry of this application.
   *
   * @param args arguments doesn't take effect with this example
   * @throws TwitterException when Twitter service or network is unavailable
   */
  TwitterStream twitterStream = new TwitterStreamFactory(cb.build()).getInstance();

  StatusListener listener = new StatusListener() {
    @Override
      public void onStatus(Status status) {
      // THIS GETS RUN WHENEVER A NEW MATCHING TWEET COMES IN.
      System.out.println("@" + status.getUser().getScreenName() + " - " + status.getText());
      if (status.getText().indexOf("#hydrate") >= 0) {
        twCount++;
      } else {
        twCount--;
      }
      sendUpdatedNumbers(twCount);
    }

    @Override
      public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {
      //System.out.println("Got a status deletion notice id:" + statusDeletionNotice.getStatusId());
    }

    @Override
      public void onTrackLimitationNotice(int numberOfLimitedStatuses) {
      //System.out.println("Got track limitation notice:" + numberOfLimitedStatuses);
    }

    @Override
      public void onScrubGeo(long userId, long upToStatusId) {
      //System.out.println("Got scrub_geo event userId:" + userId + " upToStatusId:" + upToStatusId);
    }

    @Override
      public void onStallWarning(StallWarning warning) {
      System.out.println("Got stall warning:" + warning);
    }

    @Override
      public void onException(Exception ex) {
      ex.printStackTrace();
    }
  };

  twitterStream.addListener(listener);
  twitterStream.filter(new FilterQuery("#thirsty", "#hydrate"));
}

void sendUpdatedNumbers(int n1) {
  myPort.write(n1+"\n");
}

void draw() {
  println("dataPort: " + twCount);
  //println("Cats: " + twCount1);
}
